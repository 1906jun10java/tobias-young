--2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE
WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3
INSERT INTO GENRE (NAME, GENREID)
VALUES('Symphonic Rock', 10009);
INSERT INTO GENRE (NAME, GENREID)
VALUES('European Pop Rock', 10057);

INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME, REPORTSTO)
VALUES(10564, 'Person', 'Withaname', 6);
INSERT INTO EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME, REPORTSTO)
VALUES(10768, 'People', 'Haveaname', 2);

INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, EMAIL, CUSTOMERID)
VALUES('New', 'Customerman', 'Customerman@email.com', 7890);
INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, EMAIL, CUSTOMERID)
VALUES('Another', 'Personwithaname', 'thisguysnam@email.com', 7895);

--2.4
SELECT * FROM ARTIST
ORDER BY NAME;

UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;

UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = 76;

--2.5
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM employee
WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

--2.7
ALTER TABLE INVOICE
   DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
   ADD CONSTRAINT FK_INVOICECUSTOMERID
   FOREIGN KEY (CUSTOMERID)
   REFERENCES CUSTOMER (CUSTOMERID)
   ON DELETE CASCADE;

ALTER TABLE INVOICELINE
   DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
   ADD CONSTRAINT FK_INVOICELINEINVOICEID
   FOREIGN KEY (INVOICEID)
   REFERENCES INVOICE (INVOICEID)
   ON DELETE CASCADE;

DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3.1
CREATE OR REPLACE FUNCTION CURRENT_TIME
RETURN DATE AS THE_TIME DATE;
BEGIN
RETURN SYSDATE;
END;

CREATE OR REPLACE FUNCTION WORD_LENGTH
(MT_NAME IN VARCHAR2)
RETURN NUMBER AS LETTER_NUMBER NUMBER;
BEGIN
RETURN LENGTH(MT_NAME);
END;

--3.2
CREATE OR REPLACE FUNCTION INVOICE_AVG
RETURN NUMBER AS AVERAGE NUMBER(10,2);
BEGIN 
SELECT AVG(TOTAL) INTO AVERAGE FROM INVOICE;
RETURN AVERAGE;
END;

CREATE OR REPLACE FUNCTION PRICIEST
RETURN NUMBER AS MOST_EXPENSIVE NUMBER (10,2);
BEGIN
SELECT MAX(UNITPRICE) INTO MOST_EXPENSIVE FROM TRACK;
RETURN MOST_EXPENSIVE;
END;

--3.3
CREATE OR REPLACE FUNCTION AVG_INVOICELINE
RETURN NUMBER AS LINE_AVG NUMBER (10,2);
BEGIN
SELECT AVG(UNITPRICE*QUANTITY) INTO LINE_AVG FROM INVOICELINE;
RETURN LINE_AVG;
END;

--3.4
CREATE OR REPLACE FUNCTION BORN_AFTER
RETURN SELF AS RESULT;
SELECT * INTO BORN FROM EMPLOYEE
WHERE BIRTHDATE > '1968-12-31';

--4.1
CREATE OR REPLACE PROCEDURE EMPLOYEE_NAMES
(GIVEN OUT VARCHAR2, FAMILY OUT VARCHAR2) AS
BEGIN
SELECT FIRSTNAME, LASTNAME INTO GIVEN, FAMILY FROM EMPLOYEE;
END;

--4.2
CREATE OR REPLACE PROCEDURE EMPLOYEE_UPDATE
(EMPLOYEE_ID IN NUMBER, NEW_LAST IN VARCHAR2, NEW_FIRST IN VARCHAR2) AS
BEGIN 
UPDATE EMPLOYEE
SET LASTNAME = NEW_LAST, FIRSTNAME = NEW_FIRST
WHERE EMPLOYEEID = EMPLOYEE_ID;
END;

CREATE OR REPLACE PROCEDURE EMP_MANAGER
(EMP_ID IN NUMBER, MANAGER_ID OUT NUMBER)AS
BEGIN
SELECT REPORTSTO INTO MANAGER_ID
FROM EMPLOYEE WHERE EMP_ID = EMPLOYEEID;
END;

--4.3
CREATE OR REPLACE PROCEDURE GET_CUST_INFO
(CUST_ID IN NUMBER, FIRST_NAME OUT VARCHAR2, LAST_NAME OUT VARCHAR2, CO OUT VARCHAR2)AS
BEGIN
SELECT FIRSTNAME, LASTNAME, COMPANY INTO FIRST_NAME, LAST_NAME, CO
FROM CUSTOMER WHERE CUSTOMERID = CUST_ID;
END;

--5.0
CREATE OR REPLACE PROCEDURE DEL_INV
(INV_ID IN NUMBER) AS
BEGIN
SET TRANSACTION NAME DEL_INVOICE;
DELETE FROM INVOICE
WHERE INVOICEID = INV_ID;
END;

--6.1
CREATE SEQUENCE EMP_SQ;
CREATE OR REPLACE TRIGGER TR_EMP_INSERT
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
SELECT EMP_SQ.NEXTVAL INTO: NEW.EMP_ID FROM DUAL;
END;

CREATE SEQUENCE ALB_SQ;
CREATE OR REPLACE TRIGGER TR_ALB_INSERT
AFTER INSERT ON ALBUM
FOR EACH ROW
BEGIN 
SELECT ALB_SQ.NEXTVAL INTO: NEW.ALB_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_CUST_AFTER_DELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
SELECT EMP_SQ.NEXTVAL INTO: NEW.EMP_ID FROM DUAL;
END;

--7.1
SELECT FIRSTNAME, LASTNAME,INVOICE_ID FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.INVOICE_ID = INVOICE.INVOICE_ID;

--7.2
SELECT FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER
OUTER JOIN INVOICE ON CUSTOMER.INVOICE_ID = INVOICE.INVOICE_ID;

--7.3
SELECT 'NAME', TITLE FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4
SELECT * FROM ALBUM
CROSS JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID
ORDER BY ARTIST.NAME;

--7.5
SELECT * FROM EMPLOYEE
SELF JOIN ON EMPLOYEE.REPORTSTO = EMPLOYEE.EMPLOYEEID;
